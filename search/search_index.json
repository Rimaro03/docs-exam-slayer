{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Exam Slayer - Final course exam project","text":"<p>Full documentation of the project. Check out the source code here.</p>"},{"location":"#brief-description","title":"Brief description","text":"<p>Exam Slayer is a 2D graphical adventure game, set in an imaginary dungeon. The goal of the game is to graduate: as in real life, to achieve such goal you need to pass some exams, represented in the game as boss to defeat.</p>"},{"location":"#how-to-play","title":"How to play","text":"<p>The game consists of four bosses, which represent four exams to pass. To complete the game, you need to pass each exam by finding and defeating the bosses. </p> <p>In addition, during the gameplay, you will have to deal with many enemies in order continue your adventure. To fight them, you can collect and use the items scattered in each room of the game map.</p>"},{"location":"#installation-and-execution","title":"Installation and execution","text":"<p>To download the game in <code>.jar</code> format, get the last release from here.</p> <p>If you wish to compile the game yourself, make sure you have <code>git</code> and <code>maven</code> installed, the follow these instructions: <pre><code>git clone https://github.com/UNI-projects-team/exam-slayer\ncd exam-slayer\nmvn clean compile assembly:single\njava -jar target/Progetto-edids-1.0.0-jar-with-dependencies.jar\n</code></pre> The compilation process is automated with Maven, which create the <code>.jar</code> file in the <code>target/</code> directory inside the project root.</p>"},{"location":"#technologies-used","title":"Technologies used","text":"Name Version Description Lombok 1.18.32 Java library that writes code like getters automatically Junit 4.13.2 Java framework used for developer-side testing on the JVM Maven 3.9.6 Software that manages the project's build and its dependecies Java Swing 1.4.2 Graphic framework for Java, used to develop the GUI Google cloud 2.39.0 Optimized library to connect to the google cloud API Mokito 5.12.2 Mocking framework for unit tests in Java, helps to create temporary classes"},{"location":"#project-structure","title":"Project structure","text":"<p>Here is how the game is structured:</p> <ul> <li>Application: It's the frame where the game is displayed, launched by the main file</li> <li>Game: The application launches one game</li> <li>Level: The game may contain multiple level, in this case just one</li> <li>Room: Each level contains multiple rooms, organized in the game map</li> <li>GameObject: Each room contains some game objects, like items and enemies</li> <li>Component: Each game object is composed by component, that allow it to do something (es. controllers, colliders)</li> </ul> <pre><code>classDiagram\n\nApplication --|&gt; Game\n\nGame --|&gt; Level\n\nLevel --|&gt; Room1\nLevel --|&gt; Room2\n\nRoom1 --|&gt; GameObject1\nRoom1 --|&gt; GameObject2\n\nGameObject2 --|&gt; Component1\nGameObject2 --|&gt; Component2</code></pre>"},{"location":"#world-generation","title":"World generation","text":"<p>Each time a new game is created, a random map is generated; the map generation is handled with the <code>wave function collapse algorithm</code>.  Breaf explanation of how it works: lets consider a grid that has to be filled following some rules. At first, the algorithm considers that every grid cells is potentially in every state permitted by the rules. In every loop, the algorithm sets the state for a specific cell, restricting the states the nearby cells could be by removing the invalid ones. The result is a grid filled following the rules. For a more detailed explenation, refer to this video.</p>"},{"location":"#programming-techniques-used","title":"Programming techniques used","text":"<ul> <li>Singletons: used for classes such as game, which can't be instanciated more than once.</li> <li>Controllers: used to handle user input in the game. Eg. movement controller, shooting controller.</li> <li>Factory: used to create different types of game objects.</li> <li>Observer</li> </ul>"},{"location":"#final-notes","title":"Final notes","text":"<ul> <li>Class Diagram The class diagram has been divided into three parts (main, level, items) so that its easier to read it. Keeping it united would have resulted in a too small diagram. &lt;!--TODO: Setup bucket&gt;</li> </ul>"},{"location":"system_test/","title":"System Test Document","text":"<p>Each user stories has some acceptance criteria with their results.</p>"},{"location":"system_test/#view-the-inventory","title":"View the inventory","text":"<p>As a player I want to view my inventory anytime so that I can view which items I'm carrying</p> Acceptance Criteria Result Display a window in the game for the inventory PASSED Store the items the player collects PASSED When the player collect a new item, add it to the inventory PASSED"},{"location":"system_test/#move-between-rooms","title":"Move between rooms","text":"<p>As a player, I want to be able to move between the rooms so that I can explore the game map</p> Acceptance Criteria Result Generate the game map PASSED Divide the game map into rooms PASSED Add doors to move between the rooms, not all rooms should be directly connected PASSED Implement player movement PASSED"},{"location":"system_test/#collecting-items","title":"Collecting items","text":"<p>As a player, I want to collect and use the items I find while exploring the game map to be able to use them</p> Acceptance Criteria Result Add various types of items inside each room PASSED Let the player collect the collectable items PASSED Implement a way to use these items, such as shooting PASSED"},{"location":"system_test/#interact-with-entities","title":"Interact with entities","text":"<p>As a player, I want to interact with other entities so that I can defeat enemies, for example</p> Acceptance Criteria Result Generate other entities in the game map PASSED Entities must have limited life PASSED Bosses should have more life than simple enemies PASSED Let the player interact with entities, like shooting PASSED"},{"location":"system_test/#beat-bosses","title":"Beat bosses","text":"<p>As a player, I want to beat the bosses so that I can complete the game</p> Acceptance Criteria Result Spawn bosses in some parts of the map PASSED Bosses should be more difficult to defeat PASSED When each boss is defeated, the player has completed the game PASSED"},{"location":"system_test/#saving-and-loading","title":"Saving and loading","text":"<p>As a player, I wan to save and load the game so that I can play the game when I want without losing savings</p> Acceptance Criteria Result Implement cloud game save PASSED Implement loading game from cloud savings PASSED Delete a saving if the player dies PASSED Create new saving if the player starts a new game PASSED"},{"location":"design/classes/","title":"Class diagrams","text":""},{"location":"design/classes/#component-system","title":"Component system","text":""},{"location":"design/classes/#core","title":"Core","text":""},{"location":"design/classes/#generation","title":"Generation","text":""},{"location":"design/classes/#items","title":"Items","text":""},{"location":"design/classes/#saving-system","title":"Saving system","text":""},{"location":"design/classes/#utils","title":"Utils","text":""},{"location":"design/classes/#complete","title":"Complete","text":""},{"location":"design/domain_model/","title":"Domain model","text":"<pre><code>classDiagram\n    player --&gt; room: moves between\n    player --&gt; item: collects\n    player --&gt; enemies: interact with\n    player --&gt; bosses: interact with\n    player --&gt; save_load: use\n    player --&gt; win: views\n    player --&gt; item: uses\n    save_load --&gt; game: save/loads\n    game --&gt; win: notifies\n    game --&gt; level: has\n    level --&gt; room: has\n    room --&gt; enemies: contains\n    room --&gt; bosses: contains\n    room --&gt; item: contains\n\n    class player {\n        stats\n        inventory\n    }</code></pre>"},{"location":"design/sequence_diagrams/","title":"Sequence diagram","text":""},{"location":"design/sequence_diagrams/#system-sequence-diagram","title":"System Sequence diagram","text":"<pre><code>sequenceDiagram\n  Actor Player\n  Game -&gt;&gt; Player: asks new game or load one?\n  alt new game\n    Game -&gt;&gt; Game: start new game\n  else load one\n    Game -&gt;&gt; Player: ask which save to load\n    Player -&gt;&gt; Game: select saving\n  end\n  loop  \n    Game-&gt;&gt;Game: refresh the map\n    Player -&gt;&gt; Game: moves in the map\n    Game -&gt;&gt; Player: update player position\n    alt went through a door?\n      Game-&gt;&gt;Player: change room displayed\n    end\n    Player -&gt;&gt; Game: shoots\n    alt hits entity &amp; entity life = 0?\n      Game -&gt;&gt; Player: entity died\n    else\n      Game -&gt;&gt; Game: decrease entity life\n      alt every boss defeated\n        Game -&gt;&gt; Player: notifies victory\n      end\n    end\n    Player -&gt;&gt; Game: collects item\n    alt collected heart?\n      Game -&gt;&gt; Player: increase life points\n    else\n      Game -&gt;&gt; Player: increas atk points, decrease speed\n    end\n  end</code></pre>"},{"location":"design/sequence_diagrams/#internal-sequence-diagrams","title":"Internal sequence diagrams","text":""},{"location":"design/sequence_diagrams/#movement","title":"Movement","text":"<pre><code>sequenceDiagram\n  Actor Player\n  Player -&gt;&gt; Controller: moves\n  activate Controller\n    Controller -&gt;&gt; Input: keyPressed(keyCode)\n    activate Input\n    Input -&gt;&gt; Controller: true if key pressed\n    deactivate Input\n    Controller -&gt;&gt; Controller: updates position vector\n    Controller -&gt;&gt; AnimatedSpriteRenderer: setSheetState(x,y)\n    activate AnimatedSpriteRenderer\n      AnimatedSpriteRenderer --&gt;&gt; Controller: \n    deactivate AnimatedSpriteRenderer\n    Controller -&gt;&gt; Component: setPosition(position)\n    activate Component\n      Component --&gt;&gt; Controller: \n    deactivate Component\n    Controller --&gt;&gt; Player: \n  deactivate Controller</code></pre>"},{"location":"design/sequence_diagrams/#shooting","title":"Shooting","text":"<pre><code>sequenceDiagram\n  Actor Player\n  Player -&gt;&gt; Controller: shoots\n  activate Controller\n    Controller -&gt;&gt; Input: keyPressed(keyCode)\n    activate Input\n      Input --&gt;&gt; Controller: true if key pressed\n    deactivate Input\n    Controller -&gt;&gt; GameObjectFactory: createProjectile()\n    activate GameObjectFactory\n      GameObjectFactory -&gt;&gt; GameObjectFactory: createGameObject()\n      GameObjectFactory --&gt;&gt; Controller: \n    deactivate GameObjectFactory\n    Controller -&gt;&gt; Level: instantiateGameObject\n    activate Level\n      Level -&gt;&gt; GameObject: setPosition(position)\n      activate GameObject\n        Level -&gt;&gt; GameObject: setEnabled(bool)\n        Level -&gt;&gt; GameObject: start()\n        GameObject --&gt;&gt; Level: \n      deactivate GameObject\n      Level -&gt;&gt; Room: addGameObject(gameObject)\n      activate Room\n        Room --&gt;&gt; Level: \n      deactivate Room\n      Level --&gt;&gt; Controller: \n    deactivate Level\n    Controller --&gt;&gt; Player: \n  deactivate Controller</code></pre>"},{"location":"design/sequence_diagrams/#items","title":"Items","text":"<pre><code>sequenceDiagram\n  Actor Player\n  Player -&gt;&gt; ItemCollider: collides with item\n\n  activate ItemCollider\n    ItemCollider -&gt;&gt; PlayerStats: getStats\n    activate PlayerStats\n      PlayerStats -&gt;&gt; ItemCollider: player stats\n    deactivate PlayerStats\n\n    ItemCollider -&gt;&gt; ItemCollider: getItem\n\n    ItemCollider -&gt;&gt; PlayerStats: inventory.put(item, number)\n    activate PlayerStats\n      PlayerStats --&gt;&gt; ItemCollider: \n    deactivate PlayerStats\n\n    ItemCollider -&gt;&gt; Item: onPickup(gameObject)\n    activate Item\n      Item -&gt;&gt; PlayerStats: setSpeed(integer)\n      activate PlayerStats\n        PlayerStats --&gt;&gt; Item: \n        alt Item = Heart\n          Item -&gt;&gt; PlayerStats: setHealth(integer)\n          PlayerStats --&gt;&gt; Item: \n        else\n          Item -&gt;&gt; PlayerStats: addComponent(controller)\n          PlayerStats --&gt;&gt; Item: \n        end\n      deactivate PlayerStats\n      Item --&gt;&gt; ItemCollider: \n    deactivate Item\n\n    ItemCollider -&gt;&gt; Level: destroyGameObject(gameObject)\n    activate Level\n      Level --&gt;&gt; ItemCollider: \n    deactivate Level\n    ItemCollider --&gt;&gt; Player: \n  deactivate ItemCollider</code></pre>"},{"location":"design/sequence_diagrams/#saving","title":"Saving","text":"<pre><code>sequenceDiagram\n  Actor Player\n  Player -&gt;&gt; EscMenu: toggles\n  activate EscMenu\n    EscMenu -&gt;&gt; Input: keyPressed(keycode)\n    activate Input\n      Input -&gt;&gt; EscMenu: true if key pressed\n    deactivate Input\n\n    EscMenu -&gt;&gt; Renderer: render menu to screen\n    activate Renderer\n      Renderer --&gt;&gt; EscMenu: \n    deactivate Renderer\n\n    EscMenu -&gt;&gt; Input: check enter pressed\n    activate Input\n      Input -&gt;&gt; EscMenu: menu item selected\n    deactivate Input\n    alt selected resume\n      EscMenu -&gt;&gt; Game: setPaused(false)\n      activate Game\n        Game --&gt;&gt; EscMenu: \n      deactivate Game\n    else selected save\n      EscMenu -&gt;&gt; SavingIO: flush\n      activate SavingIO\n        SavingIO -&gt;&gt; BucketManager: upload file\n        activate BucketManager\n          BucketManager -&gt;&gt; Bucket: create a file\n          activate Bucket\n            Bucket --&gt;&gt; BucketManager: \n          deactivate Bucket\n          BucketManager --&gt;&gt; SavingIO: \n        deactivate BucketManager\n        SavingIO --&gt;&gt; EscMenu: \n      deactivate SavingIO\n    else selected exit\n      EscMenu -&gt;&gt; Game: system.exit\n      activate Game\n        Game --&gt;&gt; EscMenu: \n      deactivate Game\n    end\n    EscMenu --&gt;&gt; Player: \n  deactivate EscMenu</code></pre>"},{"location":"design/sequence_diagrams/#loading","title":"Loading","text":"<pre><code>sequenceDiagram\n  Actor Player\n\n  Player -&gt;&gt; Application: chooses to load/delete data\n  Application -&gt;&gt; Game: load new game\n  activate Game\n    alt player chose to delete\n      Game -&gt;&gt; BucketManager: delete file\n      activate BucketManager\n        BucketManager -&gt;&gt; Blob: delete\n        activate Blob\n          Blob --&gt;&gt; BucketManager: \n        BucketManager  --&gt;&gt; Game: \n      deactivate BucketManager\n    end\n    Game --&gt;&gt; Application: \n  deactivate Game\n\n\n\n  activate Application\n    Application --&gt;&gt; Player: \n  deactivate Application</code></pre>"},{"location":"unit_test/","title":"Unit test","text":""}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Exam Slayer - Final course exam project","text":"<p>Full documentation of the project. Check out the source code here</p>"},{"location":"#brief-description","title":"Brief description","text":"<p>Exam Slayer is a 2D graphical adventure game, set in various UniPD classrooms. The goal of the game is to graduate: as in real life, to achieve such goal you need to pass some exams, represented in the game as boss to defeat.</p>"},{"location":"#how-to-play","title":"How to play","text":"<p>The game consists of three levels, which represent three academical years. To complete the game, you need to pass each level by collecting enough CFUs, dropped by each boss you defeat.</p> <p>Finally, during the gameplay, you can collect and use the items you find, for example spending money on the vending machiens to buy upgrades.</p>"},{"location":"#installation-and-execution","title":"Installation and execution","text":"<p>To download the game in <code>.jar</code> format, get the last release from here.</p> <p>If you want to compile the game yourself, make sure you have <code>git</code> installed, the follow these instructions: <pre><code>git clone https://github.com/UNI-projects-team/exam-slayer\ncd exam-slayer\nmvn clean compile assembly:single\njava -jar target/Progetto-edids-1.0.0-jar-with-dependencies.jar\n</code></pre> The compilation process is automated with Maven, which create the <code>.jar</code> file in the <code>target/</code> directory inside the project root.</p>"},{"location":"#technologies-used","title":"Technologies used","text":"Name Version Description Lombok 1.18.32 Java library that writes code like getters automatically Junit 4.13.2 Java framework used for developer-side testing on the JVM Maven 3.9.6 Software that manages the project's build and its dependecies Java Swing 1.4.2 Graphic framework for Java, used to develop the GUI"},{"location":"#world-generation","title":"World generation","text":"<p>Each time a new game is created, a random map is generated; the map generation is handled with the <code>wave function collapse algorithm</code>.  Breaf explanation of how it works: lets consider a grid that has to be filled following some rules. At first, the algorithm considers that every grid cells is potentially in every state permitted by the rules. In every loop, the algorithm sets the state for a specific cell, restricting the states the nearby cells could be by removing the invalid ones. The result is a grid filled following the rules. For a more detailed explenation, refer to this video.</p>"},{"location":"#colliders","title":"Colliders","text":""},{"location":"#notes","title":"Notes","text":"<ul> <li>Class Diagram The class diagram has been divided into three parts (main, level, items) so that its easier to read it. Keeping it united would have resulted in a too small diagram.</li> </ul>"},{"location":"design_document/","title":"Design document","text":""},{"location":"design_document/#domain-model","title":"Domain model","text":"<pre><code>classDiagram\n    player --&gt; room: moves between\n    player --&gt; item: interact with\n    player --&gt; fixed_item: interact with\n    player --&gt; entity: interact with\n    player --&gt; save_load: use\n    player --&gt; win: views\n    save_load --&gt; game: save/loads\n    game --&gt; win: notifies\n    game --&gt; map: has\n    map --&gt; room: contains\n    map --&gt; entity: contains\n    map --&gt; item: contains\n    map --&gt; fixed_item: contains\n\n    class player {\n        stats\n        inventory\n    }</code></pre>"},{"location":"design_document/#sequence-diagrams","title":"Sequence diagrams","text":""},{"location":"design_document/#system-sequence-diagram","title":"System sequence diagram","text":"<pre><code>sequenceDiagram\n  Actor Player\n  Game -&gt;&gt; Player: asks new game or load one?\n  alt new game\n    Game -&gt;&gt; Game: start new game\n  else load one\n    Game --&gt; Game: load existing saving\n  end\n  par  \n    loop\n      Game-&gt;&gt;Game: refresh the map\n    end\n    Player -&gt;&gt; Game: moves in the map\n    alt went through a door?\n      Game-&gt;&gt;Player: change room displayed\n    end\n    Player -&gt;&gt; Game: shoots\n    alt hits entity &amp; entity life = 0?\n      Game -&gt;&gt; Player: entity died\n    else\n      Game -&gt;&gt; Game: decrease entity life\n    end\n    Player -&gt;&gt; Game: collects item\n    alt collected heart?\n      Game -&gt;&gt; Player: increase life points\n    else\n      Game -&gt;&gt; Player: increas atk points\n    end\n  end</code></pre>"},{"location":"design_document/#class-diagrams","title":"Class diagrams","text":""},{"location":"design_document/#main-class-diagram","title":"Main class diagram","text":"<pre><code>classDiagram\n  class Main {\n    +static  main(String[])\n  }\n  class Application {\n    -static Application instance\n    -Window window\n    -Application()\n    +static getWindow() Window\n    +static  init()\n    +static  run()\n    - initInternal()\n    - runInternal()\n    - setup()\n    -windowCenteredX() int\n    -windowCenteredY() int\n  }\n  class Window {\n    -int width, height\n    +Window(int width, int height)\n    +update()\n    -paintComponent(Graphics g)\n    -setup()\n    +componentResized(ComponentEvent e)\n    +componentMoved(ComponentEvent e)\n    +componentShown(ComponentEvent e)\n    +componentHidden(ComponentEvent e)\n  }\n  class Game {\n    -static Game currentGame\n    -static Level currentLevel\n    +static final ArrayList&lt;Item&gt; allitems\n    -game()\n    +static Game loadNewGame() Game\n    +static Level getCurrentLevel() Level\n    + start()\n    + update()\n  }\n  class Level {\n    -Room currentRoom\n    -final List&lt;Room&gt; bossRooms\n    -final Physics physicsEngine\n    +Level(Room startRoom, List&lt;Room&gt; bossRooms)\n    + changeRoom(int direction)\n    + instantiateGameObject(GameObject gameObject, Vec2 position)\n    + destroyGameObject(GameObject gameObject)\n    + init()\n    + update()\n  }\n  class Item {\n    &lt;&lt;Abstract&gt;&gt;\n    -String name\n    -int weight\n    -String physicalPath\n    -String inventoryPath\n    -BufferedImage inventoryImage\n    +Item(String name, int weight, String physicalPath, String inventoryPath)\n    +abstract  use()\n    +abstract  update()\n  }\n\n  Main--&gt;Application: launches\n  Application *-- Game: instantiates and contains\n  Application --* Window: contains\n  Game *-- Item: contains many\n  Game *-- Level: instanciates and contains\n</code></pre>"},{"location":"design_document/#levels-class-diagram","title":"Levels class diagram","text":"<pre><code>classDiagram\n    class Level {\n    -Room currentRoom\n    -final List&lt;Room&gt; bossRooms\n    -final Physics physicsEngine\n    +Level(Room startRoom, List&lt;Room&gt; bossRooms)\n    + changeRoom(int direction)\n    + instantiateGameObject(GameObject gameObject, Vec2 position)\n    + destroyGameObject(GameObject gameObject)\n    + init()\n    + update()\n  }\n  class Room{\n    +static final float SIZE\n    -final ArrayList&lt;GameObject&gt; gameObjects\n    -final Room[] adjacentRooms\n    -boolean initialized\n    -InitType initType\n    -final int x, y\n    +Room(int x, int y)\n    +setAdjacentRoom(int direction, Room room)\n    +getAdjacentRoom(int direction) Room\n    +getGameObject(String name) GameObject\n    +addGameObject(GameObject gameObject)\n    +removeGameObject(GameObject gameObject)\n    +setEnabled(boolean enabled)\n    +init()\n    +updateGameObjects()\n    +toString() String\n  }\n  class Physics {\n    -final ArrayList&lt;Collider&gt; colliders\n    +Physics()\n    +addCollider(Collider collider)\n    +removeCollider(Collider collider)\n    +update()\n  }\n  class GameObject {\n    -String name\n    -ArrayList&lt;Component&gt; components\n    -Vec2 position\n    -boolean enabled\n    +GameObject(String name)\n    +GameObject(String name, Vec2 position)\n    +setEnabled(boolean enabled)\n    +addComponent(Component component)\n    +removeComponent(Component component)\n    +getComponent(Class&lt;? extends Component&gt; clazz) Component\n    +start()\n    +update()\n    +destroy()\n    +toString() String\n  }\n  class Collider {\n    -boolean movable\n    -ArrayList&lt;Collider&gt; ignoreColliders\n    +Collider(GameObject gameObject, boolean enabled, boolean movable)\n    +Collider(GameObject gameObject, boolean movable)\n    +abstract collidesWith(Collider other) boolean\n    +abstract onCollide(Collider other)\n  }\n  class Component {\n    -String name\n    -ArrayList&lt;Component&gt; components\n    -Vec2 position\n    -boolean enabled\n    +GameObject(String name)\n    +GameObject(String name, Vec2 position)\n    +setEnabled(boolean enabled)\n    +addComponent(Component component)\n    +removeComponent(Component component)\n    +getComponent(Class&lt;? extends Component&gt; clazz) Component\n    +start()\n    +update()\n    +destroy()\n    +toString() String\n  }\n  class Vec2 {\n    -float x\n    -float y\n    +Vec2(float x, float y)\n    +add(Vec2 other) Vec2\n    +subtract(Vec2 other) Vec2\n    +multiply(float scalar) Vec2\n    +divide(float scalar) Vec2\n    +dot(Vec2 other) float\n    +magnitude() float\n    +normalized() Vec2\n    +distance(Vec2 other) float\n    +copy() Vec2\n    +equals(Object o) boolean\n    +clamp(Vec2 value, Vec2 min, Vec2 max) Vec2\n    +toString() String\n  }\n\n  Level *-- Room: contains many\n  Level *-- Physics: contains\n  Room *-- GameObject: contains many\n  Physics *-- Collider: contains many\n  GameObject *-- Component: contains many\n  GameObject *-- Vec2: contains\n  Component *-- Vec2: contains</code></pre>"},{"location":"design_document/#items-class-diagram","title":"Items class diagram","text":"<pre><code>classDiagram\n    class Item {\n    &lt;&lt;Abstract&gt;&gt;\n    -String name\n    -int weight\n    -String physicalPath\n    -String inventoryPath\n    -BufferedImage inventoryImage\n    +Item(String name, int weight, String physicalPath, \\nString inventoryPath)\n    +abstract  use()\n    +abstract  update()\n  }\n  class Heart{\n    -final int health\n    +Heart(String name, int weight, String physicalPath, \\nString invetoryPath, int health)\n    + use()\n    + update()\n  }\n  class Sword {\n    -final int damage\n    +Sword(String name, int weight, String physicalPath, \\nString inventoryPath, int damage)\n    + use()\n    + update()\n  }\n\n  Heart --|&gt; Item: is a\n  Sword --|&gt; Item: is a</code></pre>"},{"location":"system_test/","title":"Sistem Test Document","text":""},{"location":"unit_test/","title":"Unit Test Document","text":""}]}